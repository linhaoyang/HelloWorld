class Solution {
public:
	void flatten(TreeNode* root) {
        
        
		if (root == nullptr) {
			return;
		}

		stack<TreeNode*> trees;

		trees.push(root);

		TreeNode* last = nullptr;

		while (trees.size() > 0)
		{
			TreeNode* cu = trees.top();
			trees.pop();

			if (last != nullptr) {
				last->right = cu;
			}

			if (cu->right != nullptr) {
				trees.push(cu->right);
				cu->right = nullptr;
			}

			if (cu->left != nullptr) {
				trees.push(cu->left);
				cu->left = nullptr;
			}

			last = cu;

		}

	}
};

====================================================================================


private TreeNode prev = null;

public void flatten(TreeNode root) {
    if (root == null)
        return;
    flatten(root.right);
    flatten(root.left);
    root.right = prev;
    root.left = null;
    prev = root;
}

=================================================================================

class Solution {
public:
    void flatten(TreeNode *root) {
		TreeNode*now = root;
		while (now)
		{
			if(now->left)
			{
                //Find current node's prenode that links to current node's right subtree
				TreeNode* pre = now->left;
				while(pre->right)
				{
					pre = pre->right;
				}
				pre->right = now->right;
                //Use current node's left subtree to replace its right subtree(original right 
                //subtree is already linked by current node's prenode
				now->right = now->left;
				now->left = NULL;
			}
			now = now->right;
		}
    }
};
