
遇到 （）问题优先考虑stack
DP 算法

左右两次遍历法
LEFT TO RIGHT THEN RIGHT TO LEFT

=========================================================================

class Solution {
public:
    int longestValidParentheses(string s) {
        
        stack<char> st;
        stack<int> index;
 
        for(int i=0;i<s.size();i++){
            
            if(!st.empty()){
                if(s[i] == ')' && st.top() == '('){
                    st.pop();
                    index.pop();
                    continue;
                }
            }
            
            index.push(i);
            st.push(s[i]);

        }
        

   	    int maxCount = 0;
		int maxIndex = s.size();

		if (!index.empty()) {

			while (!index.empty()) {

				int iii = index.top();
				index.pop();
				//cout << "maxINdex:" << maxIndex << endl;
				//cout << "iii:" << iii << endl;
				if (maxIndex - iii - 1 > maxCount) {
					maxCount = maxIndex - iii - 1;
					
				}
                maxIndex = iii;

			}
		}

        
        if(maxIndex > 0 && maxIndex > maxCount){
            maxCount = maxIndex;
        }
    
        
        return maxCount;
        
    }
};

==================================================================================================

class Solution {
    int maxSubstr = 0;
public:
    stack<int> openingParen;
    
    int longestValidParentheses(string s) {
        int i = 0;
        int maximum = 0;
        openingParen.push(-1);
        while(i < s.length()) {
            if(s[i] == '(') {
                openingParen.push(i);
            }
            else {
                openingParen.pop();
                if(!openingParen.empty()) {
                    maximum = max(i - openingParen.top(), maximum);
                }
                else {
                    openingParen.push(i);
                }
            }
            ++i;
        }
        return maximum;
    }
};

==========================================================================================

public class Solution {
    public int longestValidParentheses(String s) {
        int maxans = 0;
        int dp[] = new int[s.length()];
        for (int i = 1; i < s.length(); i++) {
            if (s.charAt(i) == ')') {
                if (s.charAt(i - 1) == '(') {
                    dp[i] = (i >= 2 ? dp[i - 2] : 0) + 2;
                } else if (i - dp[i - 1] > 0 && s.charAt(i - dp[i - 1] - 1) == '(') {
                    dp[i] = dp[i - 1] + ((i - dp[i - 1]) >= 2 ? dp[i - dp[i - 1] - 2] : 0) + 2;
                }
                maxans = Math.max(maxans, dp[i]);
            }
        }
        return maxans;
    }
}
