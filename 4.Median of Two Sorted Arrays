
class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        
        int count = nums1.size() + nums2.size();
        
        if(count %2 == 0){
            int a = findKthElement(nums1,nums2,0,nums1.size(),0,nums2.size(),count/2);
            int b = findKthElement(nums1,nums2,0,nums1.size(),0,nums2.size(),count/2+1);
            return (a+b)*0.5f;
        }else{
            
            return findKthElement(nums1,nums2,0,nums1.size(),0,nums2.size(),count/2+1);
            
        }
        
        return 0.0;
        
    }
    
  double findKthElement(vector<int>& nums1, vector<int>& nums2,int start1,int end1,int start2,int end2,int k) {

		int count1 = end1 - start1;
		int count2 = end2 - start2;

		if (count1 > count2) {

			return findKthElement(nums2, nums1, start2, end2, start1, end1, k);
		}

		if (count1 <= 0) {
			return nums2[start2 + k - 1];
		}

		if (k == 1) {
			return nums1[start1] < nums2[start2] ? nums1[start1] : nums2[start2];
		}

		int aaa = count1;
		if (k < count1) aaa = k;
		int index1 = (aaa+1) / 2;
		
		int a1 = nums1[start1 + index1 - 1];

		int index2 = k - index1;

		int a2 = nums2[start2 + index2 - 1];

		if (a1 <= a2) {
			return findKthElement(nums1, nums2, start1 + index1, end1, start2, start2 + index2, k - index1);
		}
		else {
			return findKthElement(nums1, nums2, start1, start1 + index1, start2 + index2, end2, k - index2);
		}


	}
};



=======================================================================================

 double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        int nums1Size = nums1.size();
        int nums2Size = nums2.size();
        if (nums1Size > nums2Size){
            return findMedianSortedArrays(nums2, nums1);
        }
        //binary search on smaller array to find correct partition such that
        //1. all elements on left are <= elements on right
        //2. partitions are same size and equal to nums1.size()
        int start = 0;
        int end = nums1Size;
        int halfLength = (nums1Size + nums2Size + 1)/2;
        while (start <= end){
            int partitionX = (end + start)/2;
            int partitionY = halfLength - partitionX;
            if (partitionX < end && nums2[partitionY-1] > nums1[partitionX]){
                start++;
            }
            else if (partitionX > 0 && nums1[partitionX-1] > nums2[partitionY]){
                end--;
            }
            else {
                double maxLeft = 0.0;
                if (partitionX == 0) {
                    maxLeft = nums2[partitionY-1];
                }
                else if (partitionY == 0)
                    maxLeft = nums1[partitionX-1];
                else
                    maxLeft = max(nums1[partitionX-1], nums2[partitionY-1]);
                //if odd
                if ((nums1Size + nums2Size) % 2 == 1){
                    
                    return maxLeft;
                }
                double minRight = 0.0;
                if (partitionX == nums1Size)
                    minRight = nums2[partitionY];
                else if (partitionY == nums2Size)
                    minRight = nums1[partitionX];
                else
                    minRight = min(nums1[partitionX], nums2[partitionY]); 
                return (maxLeft + minRight) / 2.0;
            
            }
        }
    }
