
divide and conquer!!!
==========================================================================================
class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        if (nums.size() == 0) {
            return 0;
        }
        int globalMax = nums[0];
        int currMax = nums[0];
        
        for (int i = 1; i < nums.size(); i++) {
            currMax = max(currMax + nums[i], nums[i]);
            if (currMax > globalMax) {
                globalMax = currMax;
            }
        }
        return globalMax;
    }
};

===========================================================================================

DP THOUGHTS

public int maxSubArray(int[] A) {
        int n = A.length;
        int[] dp = new int[n];//dp[i] means the maximum subarray ending with A[i];
        dp[0] = A[0];
        int max = dp[0];
        
        for(int i = 1; i < n; i++){
            dp[i] = A[i] + (dp[i - 1] > 0 ? dp[i - 1] : 0);
            max = Math.max(max, dp[i]);
        }
        
        return max;
}
