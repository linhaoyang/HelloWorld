class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        
        ListNode* current = new ListNode(0);
        ListNode* head = current;
        
        while(l1 != NULL && l2 != NULL){
            
            if(l1->val < l2->val){
                
                current->next = l1;
                l1 = l1->next;
                
            }else{
                
                current->next = l2;
                l2 = l2->next;
                
            }
            
            current = current->next;
        }
        
        while(l1 != NULL){
            
            current->next = l1;
            l1 = l1->next;
            current = current->next;
        }
        
        while(l2 != NULL){
            
            current->next = l2;
            l2 = l2->next;
            current = current->next;
        }
        
        return head->next;
        
    }
};

=============================================================================================================

static int sres = []() {
  ios::sync_with_stdio(false);
  cin.tie(nullptr);
  return 0;
}();

class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        if(l1 == nullptr ) return l2;
        if(l2 == nullptr ) return l1;
        
        ListNode* head = new ListNode(0);
        ListNode* t = head;
        
        while(l1 != nullptr || l2 != nullptr) {
            if(l1 != nullptr && l2 != nullptr) {
                if(l1->val > l2->val) {
                    t->next = l2;
                    l2 = l2->next;
                } else {
                    t->next = l1;
                    l1 = l1->next;
                }
                t = t->next;    
            } else {
                if(l1 == nullptr)
                    t->next = l2;
                else
                    t->next = l1;
                break;
            }
        }
        return head->next;
    }
};
