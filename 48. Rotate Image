class Solution {
public:
	void rotate(vector<vector<int>>& matrix) {

		int n = matrix.size();
		int start= 0;
		int end = n;
		int count = n / 2;

		for (int i = 0; i < count; i++) {


			for (int col = start; col < end-1; col++)
			{
				//cout << matrix[start][col] <<" ";
				//cout << matrix[col][end - 1] << " ";
				//cout << matrix[end - 1][n - col-1] << " ";
				//cout << matrix[n -1- col][start] << " ";

				int temp = matrix[start][col];
				matrix[start][col] = matrix[n - 1 - col][start];
				matrix[n - 1 - col][start] = matrix[end - 1][n - col - 1];
				matrix[end - 1][n - col - 1] = matrix[col][end - 1];
				matrix[col][end - 1] = temp;

			}

			start++;
			end--;
		}

	
	}
};


================================================================================================================

class Solution {
public:
    void rotate(vector<vector<int>>& matrix) {
        for (int i = 0; i < matrix.size() / 2; i++) {
            for (int j = i; j < matrix.size() - i - 1; j++) {
                int curr = matrix[i][j];

                for (int r = 0; r < 4; r++) {
                    int row = j;
                    int col = matrix.size() - i - 1;
                    int tmp = matrix[row][col];
                    matrix[row][col] = curr;
                    curr = tmp;
                    i = row;
                    j = col;
                }
            }
        }
    }
};
