
How Far you can Reach


class Solution {
public:
    bool canJump(vector<int>& nums) {
        // max_idx: from idx i, how far you can reach 
        int max_idx = 0;
        int n = nums.size();
        for(int i = 0; i < n; i++) {
            if (max_idx < i) return false;    
            max_idx = max(max_idx, nums[i] + i);
        }
        return true;
    }
};

=================================================================================================================

simple DP

class Solution {
public:


	bool canJump(vector<int>& nums) {

		vector<int> dp(nums.size(), 0);

		dp[nums.size() - 1] = 1;

		for (int i = nums.size() - 1; i > -1; i--) {
			dp[i] = canJumpR(nums, dp, i);
		}
			
		for (int i = nums.size() - 1; i > -1; i--) {
			cout << nums[i] << ":" << dp[i] << endl;
		}

		return dp[0] > 0;
	}


	int canJumpR(vector<int>& nums, vector<int>& dp, int curIndex) {

		if (dp[curIndex] != 0) {
			return dp[curIndex];
		}

		for (int i = 1; i <= nums[curIndex]; i++) {
		
			if (canJumpR(nums, dp, curIndex + i) > 0) {
				return 1;
			}
		}

		return -1;
	}

};
