/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        
        ListNode* a1 = l1;
        ListNode* a2 = l2;
        ListNode* b1 = new ListNode(0);
        ListNode* head = b1;
        int next = 0;
        
        while(a1 != NULL && a2 != NULL){
            
            int r = a1->val+a2->val;
            
            int value = (r+next)%10;
            next = (r+next)/10;
        
            b1->next = new ListNode(value);
            
            b1 = b1->next;
            a1 = a1->next;
            a2 = a2->next;
            
          
        }
        
        
        while(a1 != NULL){
            
            int r = a1->val;
            
            int value = (r+next)%10;
            next = (r+next)/10;
        
            b1->next = new ListNode(value);

            b1 = b1->next;
            a1 = a1->next;
        }
        
        while(a2 != NULL){
            
            int r = a2->val;
            
            int value = (r+next)%10;
            next = (r+next)/10;
        
            b1->next = new ListNode(value);

            b1 = b1->next;
            a2 = a2->next;
        }
        
        if(next > 0){
            b1->next = new ListNode(next);
        }
        
        return head->next;
        
    }
};

=================================================================================================================
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode* result;
        result = new ListNode(0);
        ListNode* root = result;
        int carry = 0;
        while(result != NULL){
            if(l1!=NULL){
                result->val += l1->val;
                l1 = l1->next;
            }
            if(l2 != NULL){
                result->val += l2->val;
                l2 = l2->next;
            }
            carry = result->val/10;
            result->val = result->val%10;
            if(l1!= NULL || l2 !=NULL || carry){
                result->next = new ListNode(carry);
            }
            result = result->next;
        }
        return root;
    }
};
