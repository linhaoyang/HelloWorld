
递归分化思想,由小组合大


class Solution {
public:
    vector<string> generateParenthesis(int n) {
        
        vector<string> result;
        
        putLeft("",n*2,result,0,0);
        
        return result;
    }
    
    void putRight(string str,int num,vector<string>& result,int left,int right){
        
        
        if(right< left){
            
            str+=")";
            right++;
            if(str.size() == num){
                result.push_back(str);
                return;
            }
                
            putLeft(str,num,result,left,right);
            putRight(str,num,result,left,right);
        
        
        }
        
    }
    
    void putLeft(string str,int num,vector<string>& result,int left,int right){
        
          if(num/2>left){
              
            str+="(";
            left++;
            if(str.size() == num){
                result.push_back(str);
                return;
            }
              
            putLeft(str,num,result,left,right);
            putRight(str,num,result,left,right);

          }
        
    }
};

===========================================================================================================

class Solution {
public:
    vector<string> generateParenthesis(int n) {
        if (n == 0)
            return {""};
        
        vector<string> result;
        
        for (int i = 0; i < n; i++) {
            vector<string> left = generateParenthesis(i);
            vector<string> right = generateParenthesis(n - i - 1);

            for (string& l : left) {
                for (string& r : right) {
                    result.push_back("(" + l + ")" + r);
                }
            }
        }
        
        return result;
    }
};
