class Solution {
public:
    int searchInsert(vector<int>& nums, int target) {
        
        return search(nums,target);
    }
    
    
     int search(vector<int>& nums, int target) {
        
        int low = 0;
        int high = nums.size();
        
        while(low<high){
            int mid = low+(high-low)/2;
            
            if(target==nums[mid]){
                return mid;
            }
            
            if(target<nums[mid]){
                
                high = mid;
            }else{
                
                low = mid+1;
            }
            
        }
         
        if(high == nums.size()){
            return high;
        } 
         
        return nums[high]>target? high:high+1;
        
        
    }
};

=================================================================================================

class Solution {
public:
    int searchInsert(vector<int>& nums, int target) {
        return searchInsertUtil(nums, 0, nums.size()-1, target);
    }
    
    int searchInsertUtil(vector<int>& nums, int start, int end, int target) {
        if (nums[start] > target) return std::max(0, start);
        if (nums[end] < target) return end+1;
        
        int middle = (start+end)/2;
        
        if (nums[middle] > target) {
            return searchInsertUtil(nums, start, middle-1, target);
        } else if (nums[middle] < target) {
            return searchInsertUtil(nums, middle+1, end, target);
        } else {
            return middle;
        }
    }
};
