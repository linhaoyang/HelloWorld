
Divide And Conquer 减少遍历次数
=====================================================================
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        
        if(lists.size() == 0){
            return NULL;
        }
        
        ListNode* current = new ListNode(0);
        ListNode* head = current;
        
        vector<ListNode*> temp;
        
        int count = lists.size();
        
        if(count%2 !=0){
            temp.push_back(lists[lists.size()-1]);
            count--;
        }
        
              
        for(int i =0;i<count;){
            
            ListNode* n = mergeTwoLists(lists[i],lists[i+1]);
            
            temp.push_back(n);    
                
            i+=2;
        }
        
        if(temp.size() == 1){
            
            return temp[0];
        }
              
        return mergeKLists(temp);
        
    }
    
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        if(l1 == nullptr ) return l2;
        if(l2 == nullptr ) return l1;
        
        ListNode* head = new ListNode(0);
        ListNode* t = head;
        
        while(l1 != nullptr || l2 != nullptr) {
            if(l1 != nullptr && l2 != nullptr) {
                if(l1->val > l2->val) {
                    t->next = l2;
                    l2 = l2->next;
                } else {
                    t->next = l1;
                    l1 = l1->next;
                }
                t = t->next;    
            } else {
                if(l1 == nullptr)
                    t->next = l2;
                else
                    t->next = l1;
                break;
            }
        }
        return head->next;
    }
};

=============================================================================================

class Solution {
public:
    // divide and conquer, beat 45%
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        if(lists.size()==0) return NULL;
        return merge(lists, 0, lists.size());
    }
    ListNode* merge(vector<ListNode*>& lists, int s, int n) {
        if(n==1) return lists[s];
        ListNode* l1 = merge(lists, s, n/2);
        ListNode* l2 = merge(lists, s+n/2, n-n/2);
        ListNode dummy(0);
        ListNode* p = &dummy;
        while( l1&& l2){
            if(l1->val<=l2->val){
                p->next = l1; 
                l1 = l1->next;
                p = p->next;
            }else{
                p->next = l2;
                l2 = l2->next;
                p = p->next;
            }
        }
        p->next = l1? l1:l2;
        return dummy.next;
    }
   
==========================================================================================

class Solution {
public:
	ListNode* mergeKLists(vector<ListNode*>& lists) {
		if (lists.empty()) return NULL;
		if (lists.size() == 1) return lists[0];
		for (int i = 0; i < lists.size() - 1;) {
			lists.push_back(mergeTwoLists(lists[i], lists[i + 1]));
			i += 2;
		}
		return lists.back();
	}
	ListNode* mergeTwoLists(ListNode *l1, ListNode *l2) {
		ListNode dummy(INT_MIN);
		ListNode *tail = &dummy;
		while (l1 && l2) {
			if (l1->val <= l2->val) {
				tail->next = l1;
				l1 = l1->next;
			}
			else {
				tail->next = l2;
				l2 = l2->next;
			}
			tail = tail->next;
		}
		tail->next = l1 ? l1 : l2;
		return dummy.next;
	}
};
   
