class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        
        unordered_map<char, int> map;
        int maxLength = 0;
        int start = 0;
        int i = 0;
        
        
        for(;i<s.size();i++){
            
            if(map.find(s[i]) != map.end() && map[s[i]] >= start){
                

                if(i - start > maxLength){
                    
                    maxLength = i - start;
                }
                
                start = map[s[i]]+1;
                
                map[s[i]] = i;
                
                continue;
            }
            
            
            map[s[i]] = i;
        }
        
        if(i - start > maxLength){
                    
            maxLength = i - start;
        }
        
        return maxLength;

    }
};

==========================================================================================

JAVA:
public class Solution {
    public int lengthOfLongestSubstring(String s) {
        int n = s.length(), ans = 0;
        Map<Character, Integer> map = new HashMap<>(); // current index of character
        // try to extend the range [i, j]
        for (int j = 0, i = 0; j < n; j++) {
            if (map.containsKey(s.charAt(j))) {
                i = Math.max(map.get(s.charAt(j)), i);
            }
            ans = Math.max(ans, j - i + 1);
            map.put(s.charAt(j), j + 1);
        }
        return ans;
    }
}
