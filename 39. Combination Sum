
回溯

==================================================================================================
class Solution {
public:
	vector<vector<int>> combinationSum(vector<int>& candidates, int target) {

		vector<vector<int>> results;

		vector<int> temp;

		for (int i = 0; i<candidates.size(); i++) {

			findAset(results, candidates, target, i, 0, temp);
			temp.clear();

		}

		return results;
	}


	void findAset(vector<vector<int>>& results, vector<int>& candidates, int target, int index, int sum, vector<int>& temp) {


		int result = sum + candidates[index];
		temp.push_back(candidates[index]);

		if (result > target) {
			return;
		}

		if (result == target) {

			//vector<int>b(temp);

			results.push_back(temp);

			return;
		}

		for (int i = 0; i < candidates.size(); i++) {

			if (index+i >= candidates.size())
			{
				break;
			}

			findAset(results, candidates, target, index+i, result, temp);

			if (temp.size() > 0)
			{
				temp.pop_back();
			}

		}

	}
};

====================================================================================================================

class Solution {
public:
    std::vector<std::vector<int> > combinationSum(std::vector<int> &candidates, int target) {
        std::sort(candidates.begin(), candidates.end());
        std::vector<std::vector<int> > res;
        std::vector<int> combination;
        combinationSum(candidates, target, res, combination, 0);
        return res;
    }
private:
    void combinationSum(std::vector<int> &candidates, int target, std::vector<std::vector<int> > &res, std::vector<int> &combination, int begin) {
        if (!target) {
            res.push_back(combination);
            return;
        }
        for (int i = begin; i != candidates.size() && target >= candidates[i]; ++i) {
            combination.push_back(candidates[i]);
            combinationSum(candidates, target - candidates[i], res, combination, i);
            combination.pop_back();
        }
    }
};
