
换成QUEUE效率更高

class Solution {
public:
	vector<vector<int>> levelOrder(TreeNode* root) {
        

		vector<vector<int>> vecs;

		vector<TreeNode*> curLevels;
        
        if(root != nullptr){

		curLevels.push_back(root);
        }

		while (curLevels.size() > 0) {

			vector<TreeNode*> nextLevels;
			vector<int> vv;

			for (int i = 0; i < curLevels.size(); i++) {

				TreeNode* a = curLevels[i];
				vv.push_back(a->val);
				if (a->left) {
					nextLevels.push_back(a->left);
				}
				if (a->right) {
					nextLevels.push_back(a->right);
				}

			}
			curLevels = nextLevels;

			vecs.push_back(vv);
			
		}

		return vecs;

	}
};

======================================================================================

vector<vector<int>> ret;

void buildVector(TreeNode *root, int depth)
{
    if(root == NULL) return;
    if(ret.size() == depth)
        ret.push_back(vector<int>());
    
    ret[depth].push_back(root->val);
    buildVector(root->left, depth + 1);
    buildVector(root->right, depth + 1);
}

vector<vector<int> > levelOrder(TreeNode *root) {
    buildVector(root, 0);
    return ret;
}
