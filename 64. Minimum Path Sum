class Solution {
public:
	int minPathSum(vector<vector<int>>& grid) {

		int m = grid.size();
		int n = grid[0].size();

		vector<vector<int> > minG(grid.size(), vector<int>(n));
		minG[0][0] = grid[0][0];

		for (int i = 1; i < grid.size(); i++) {
			minG[i][0] = minG[i - 1][0] + grid[i][0];
		}

		for (int i = 1; i < grid[0].size(); i++) {
			minG[0][i] = minG[0][i-1] + grid[0][i];
		}

		for (int i = 1; i < grid.size(); i++) {
			for (int j = 1; j < grid[i].size(); j++) {

				int pathSum = std::min(minG[i - 1][j], minG[i][j - 1]) + grid[i][j];
				minG[i][j] = pathSum;
				
			}
		}

		cout << minG[m - 1][n - 1];
		return minG[m - 1][n - 1];

	}
};

====================================================================================================================

class Solution {
public:
    int minPathSum(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();
        vector<int> cur(m, grid[0][0]);
        for (int i = 1; i < m; i++)
            cur[i] = cur[i - 1] + grid[i][0]; 
        for (int j = 1; j < n; j++) {
            cur[0] += grid[0][j]; 
            for (int i = 1; i < m; i++)
                cur[i] = min(cur[i - 1], cur[i]) + grid[i][j];
        }
        return cur[m - 1];
    }
};
